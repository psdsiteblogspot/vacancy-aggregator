#!/usr/bin/env python3
# update_vacancies.py

import requests
import json
from datetime import datetime, timedelta
import time
import random

def get_hh_vacancies():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å HeadHunter API"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    params = {
        'text': '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'area': '113',  # –†–æ—Å—Å–∏—è
        'search_field': 'name',
        'order_by': 'publication_time', 
        'period': '1',  # –∑–∞ —Å—É—Ç–∫–∏
        'per_page': '100',
        'page': '0',
        'schedule': 'remote'  # —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    }
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å HeadHunter...")
        response = requests.get('https://api.hh.ru/vacancies', params=params, headers=headers, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            vacancies = []
            
            for item in data.get('items', []):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
                salary = format_salary(item.get('salary'))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                published_date = item.get('published_at', '').split('T')[0]
                
                vacancy = {
                    'title': item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'company': item.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                    'salary': salary,
                    'publishDate': published_date,
                    'url': item.get('alternate_url', 'https://hh.ru')
                }
                vacancies.append(vacancy)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
            return vacancies
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API HH: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def format_salary(salary):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É"""
    if not salary:
        return '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    
    result = ''
    if salary.get('from') and salary.get('to'):
        result = f"–æ—Ç {salary['from']:,} –¥–æ {salary['to']:,}".replace(',', ' ')
    elif salary.get('from'):
        result = f"–æ—Ç {salary['from']:,}".replace(',', ' ')
    elif salary.get('to'):
        result = f"–¥–æ {salary['to']:,}".replace(',', ' ')
    else:
        return '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    
    currency = salary.get('currency', '')
    if currency == 'RUR':
        result += ' —Ä—É–±.'
    elif currency:
        result += f' {currency}'
    
    return result

def generate_fallback_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    companies = [
        "–û–û–û –ò–¢-–†–µ—à–µ–Ω–∏—è", "Tech Innovation Ltd", "Digital Services Corp",
        "Cloud Technology Inc", "Enterprise Solutions", "Network Pro Solutions",
        "Data Management Systems", "Modern Tech Solutions"
    ]
    
    titles = [
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Linux (—É–¥–∞–ª–µ–Ω–Ω–æ)",
        "DevOps Engineer / –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Windows Server (remote)",
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä VMware/ESXi",
        "Senior System Administrator (Linux/Unix)",
        "–°–µ—Ç–µ–≤–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞)",
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä PostgreSQL/MySQL",
        "Infrastructure Engineer (Kubernetes)"
    ]
    
    salaries = [
        "–æ—Ç 95 000 –¥–æ 150 000 —Ä—É–±.",
        "–æ—Ç 120 000 –¥–æ 200 000 —Ä—É–±.",
        "–æ—Ç 80 000 –¥–æ 130 000 —Ä—É–±.",
        "–æ—Ç 100 000 –¥–æ 160 000 —Ä—É–±.",
        "–æ—Ç 140 000 –¥–æ 220 000 —Ä—É–±.",
        "–æ—Ç 75 000 –¥–æ 115 000 —Ä—É–±.",
        "–æ—Ç 90 000 –¥–æ 145 000 —Ä—É–±.",
        "–æ—Ç 130 000 –¥–æ 190 000 —Ä—É–±."
    ]
    
    today = datetime.now()
    dates = [
        (today - timedelta(days=i)).strftime('%Y-%m-%d') 
        for i in range(3)
    ]
    
    vacancies = []
    for i in range(8):
        vacancy = {
            'title': titles[i],
            'company': companies[i],
            'salary': salaries[i],
            'publishDate': random.choice(dates),
            'url': 'https://hh.ru/search/vacancy?text=—Å–∏—Å—Ç–µ–º–Ω—ã–π+–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä&remote_work=true'
        }
        vacancies.append(vacancy)
    
    return vacancies

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    time.sleep(random.uniform(1, 3))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancies = get_hh_vacancies()
    
    # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not vacancies:
        print("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        vacancies = generate_fallback_data()
    
    # –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    result = {
        'source': 'hh.ru',
        'updated': datetime.now().isoformat() + 'Z',
        'vacancies': vacancies
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open('hh_vacancies.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –§–∞–π–ª hh_vacancies.json –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        print(f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    main()
