name: Simple JSON Upload

on:
  workflow_dispatch: # Ручной запуск

jobs:
  upload-json:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Create fresh JSON file
        run: |
          echo "=== СОЗДАНИЕ НОВОГО JSON ФАЙЛА ==="
          
          # Удаляем старый файл если есть
          rm -f hh_vacancies.json
          
          python3 << 'EOF'
          import requests
          import json
          from datetime import datetime
          import time
          
          print("Получаем свежие вакансии...")
          
          try:
              url = "https://api.hh.ru/vacancies"
              headers = {'User-Agent': 'VacancyBot/1.0'}
              params = {
                  'text': 'системный администратор',
                  'area': '113',
                  'per_page': '20'
              }
              
              response = requests.get(url, params=params, headers=headers, timeout=30)
              print(f"API статус: {response.status_code}")
              
              if response.status_code == 200:
                  data = response.json()
                  items = data.get('items', [])
                  print(f"Получено {len(items)} вакансий")
                  
                  # Создаем уникальный JSON файл
                  result = {
                      'created_at': datetime.now().isoformat(),
                      'unix_timestamp': int(time.time()),
                      'total_count': len(items),
                      'status': 'fresh_data',
                      'api_source': 'HeadHunter',
                      'deploy_version': f"v{int(time.time())}",
                      'vacancies': []
                  }
                  
                  # Обрабатываем вакансии
                  for item in items:
                      # Форматируем дату
                      pub_date = item.get('published_at', '')
                      formatted_date = pub_date
                      if pub_date:
                          try:
                              from datetime import datetime
                              dt = datetime.fromisoformat(pub_date.replace('Z', '+00:00'))
                              formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                          except:
                              pass
                      
                      vacancy = {
                          'id': item.get('id'),
                          'name': item.get('name', ''),
                          'company': item.get('employer', {}).get('name', '') if item.get('employer') else '',
                          'company_url': item.get('employer', {}).get('alternate_url', '') if item.get('employer') else '',
                          'url': item.get('alternate_url', ''),
                          'published_at': pub_date,
                          'published_date_formatted': formatted_date,
                          'area': item.get('area', {}).get('name', '') if item.get('area') else '',
                          'salary': item.get('salary'),
                          'snippet': item.get('snippet', {}),
                          'experience': item.get('experience', {}).get('name', '') if item.get('experience') else '',
                          'employment': item.get('employment', {}).get('name', '') if item.get('employment') else '',
                          'schedule': item.get('schedule', {}).get('name', '') if item.get('schedule') else ''
                      }
                      result['vacancies'].append(vacancy)
                  
                  # Сохраняем
                  with open('hh_vacancies.json', 'w', encoding='utf-8') as f:
                      json.dump(result, f, ensure_ascii=False, indent=2)
                  
                  print(f"✅ JSON файл создан с {len(items)} вакансиями")
                  
              else:
                  print(f"❌ Ошибка API: {response.status_code}")
                  # Создаем пустой файл
                  result = {
                      'created_at': datetime.now().isoformat(),
                      'unix_timestamp': int(time.time()),
                      'total_count': 0,
                      'status': 'api_error',
                      'error_code': response.status_code,
                      'vacancies': []
                  }
                  
                  with open('hh_vacancies.json', 'w', encoding='utf-8') as f:
                      json.dump(result, f, ensure_ascii=False, indent=2)
                  
          except Exception as e:
              print(f"❌ Ошибка: {e}")
              # Создаем файл с ошибкой
              result = {
                  'created_at': datetime.now().isoformat(),
                  'unix_timestamp': int(time.time()),
                  'total_count': 0,
                  'status': 'error',
                  'error_message': str(e),
                  'vacancies': []
              }
              
              with open('hh_vacancies.json', 'w', encoding='utf-8') as f:
                  json.dump(result, f, ensure_ascii=False, indent=2)
          EOF
          
          echo "=== ПРОВЕРКА СОЗДАННОГО ФАЙЛА ==="
          if [ -f "hh_vacancies.json" ]; then
            echo "✅ Файл создан"
            echo "Размер: $(stat -c%s hh_vacancies.json) байт"
            echo "Первые строки:"
            head -3 hh_vacancies.json
          else
            echo "❌ Файл не создан!"
            exit 1
          fi
          
      - name: Upload via curl (direct)
        run: |
          echo "=== ПРЯМАЯ ЗАГРУЗКА ЧЕРЕЗ CURL ==="
          
          if [ -f "hh_vacancies.json" ]; then
            echo "Загружаем файл через curl..."
            
            curl -v -T hh_vacancies.json \
              ftp://${{ secrets.FTP_SERVER }}/home/c54971/gradelift.ru/Vacancy/ \
              --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
              --ftp-create-dirs
            
            echo "✅ Curl загрузка завершена"
          else
            echo "❌ Файл для загрузки не найден!"
            exit 1
          fi
          
      - name: Verify upload success
        run: |
          echo "=== ПРОВЕРКА РЕЗУЛЬТАТА ==="
          echo "Файл должен появиться на FTP сервере:"
          echo "Путь: /home/c54971/gradelift.ru/Vacancy/hh_vacancies.json"
          echo "Проверьте файловый менеджер хостинга."
