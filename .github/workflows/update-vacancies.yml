name: Cleanup Duplicate Files

on:
  workflow_dispatch: # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Move file from wrong path to correct path
        run: |
          echo "=== –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –§–ê–ô–õ–ê –í –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ï–°–¢–û ==="
          
          # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
          echo "1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –ø—É—Ç–∏..."
          curl -v \
            ftp://${{ secrets.FTP_SERVER }}/home/c54971/gradelift.ru/Vacancy/hh_vacancies.json \
            --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
            -o downloaded_hh_vacancies.json || echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥—É–±–ª–∏—Ä—É—é—â–µ–º –ø—É—Ç–∏"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
          if [ -f "downloaded_hh_vacancies.json" ]; then
            echo "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω"
            echo "–†–∞–∑–º–µ—Ä: $(stat -c%s downloaded_hh_vacancies.json) –±–∞–π—Ç"
            echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
            head -5 downloaded_hh_vacancies.json
          else
            echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
            python3 << 'EOF'
import requests
import json
from datetime import datetime

try:
    url = "https://api.hh.ru/vacancies"
    headers = {'User-Agent': 'VacancyBot/1.0'}
    params = {
        'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'area': '113',
        'per_page': '20'
    }
    
    response = requests.get(url, params=params, headers=headers, timeout=30)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get('items', [])
        
        result = {
            'updated_at': datetime.now().isoformat(),
            'total_count': len(items),
            'status': 'cleanup_and_update',
            'vacancies': []
        }
        
        for item in items:
            pub_date = item.get('published_at', '')
            formatted_date = pub_date
            if pub_date:
                try:
                    dt = datetime.fromisoformat(pub_date.replace('Z', '+00:00'))
                    formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    pass
            
            vacancy = {
                'id': item.get('id'),
                'name': item.get('name', ''),
                'company': item.get('employer', {}).get('name', '') if item.get('employer') else '',
                'company_url': item.get('employer', {}).get('alternate_url', '') if item.get('employer') else '',
                'url': item.get('alternate_url', ''),
                'published_at': pub_date,
                'published_date_formatted': formatted_date,
                'area': item.get('area', {}).get('name', '') if item.get('area') else '',
                'salary': item.get('salary'),
                'snippet': item.get('snippet', {}),
                'experience': item.get('experience', {}).get('name', '') if item.get('experience') else '',
                'employment': item.get('employment', {}).get('name', '') if item.get('employment') else '',
                'schedule': item.get('schedule', {}).get('name', '') if item.get('schedule') else ''
            }
            result['vacancies'].append(vacancy)
        
        with open('downloaded_hh_vacancies.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å {len(items)} –≤–∞–∫–∞–Ω—Å–∏—è–º–∏")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
EOF
          fi
          
      - name: Upload to correct path using curl
        run: |
          echo "=== –ó–ê–ì–†–£–ó–ö–ê –í –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ ==="
          
          if [ -f "downloaded_hh_vacancies.json" ]; then
            echo "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ: /Vacancy/"
            
            curl -v -T downloaded_hh_vacancies.json \
              ftp://${{ secrets.FTP_SERVER }}/Vacancy/hh_vacancies.json \
              --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
              --ftp-create-dirs
            
            echo "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ /Vacancy/"
          else
            echo "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
          fi
          
      - name: Verify correct placement
        run: |
          echo "=== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ==="
          
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ /Vacancy/:"
          curl -v --list-only \
            ftp://${{ secrets.FTP_SERVER }}/Vacancy/ \
            --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" || echo "–ü–∞–ø–∫–∞ /Vacancy/ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
          
          echo ""
          echo "‚úÖ –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ: /Vacancy/hh_vacancies.json"
          echo "üåê URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: https://gradelift.ru/Vacancy/hh_vacancies.json"
