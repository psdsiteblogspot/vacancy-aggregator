name: Exact Match Diagnostic

on:
  workflow_dispatch:

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install requests
          
      - name: Run exact match diagnostic
        run: |
          cat > diagnostic.py << 'EOF'
          import requests
          import time
          from datetime import datetime
          
          BASE_URL = "https://api.hh.ru/vacancies"
          HEADERS = {
              'User-Agent': 'VacancyAggregator/2.0 (https://gradelift.ru)'
          }
          
          print("=" * 70)
          print("ПРОВЕРКА ТОЧНОГО СООТВЕТСТВИЯ С САЙТОМ HH.RU")
          print(f"Время: {datetime.now()}")
          print("=" * 70)
          
          # Тест 1: Точные параметры как на сайте
          print("\n1. ТЕСТ С ПАРАМЕТРАМИ КАК НА САЙТЕ")
          print("-" * 70)
          
          params_site = {
              'text': 'Системный администратор',  # С большой буквы как на сайте
              'area': '1',  # Москва
              'search_field': 'name',  # В названии вакансии
              'per_page': '50',
              'page': '0'
          }
          
          response = requests.get(BASE_URL, params=params_site, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              print(f"✅ С большой буквы: {data.get('found', 0)} вакансий")
              print(f"   Альтернативный URL: {data.get('alternate_url', '')}")
          
          time.sleep(0.5)
          
          # Тест 2: С маленькой буквы
          params_lower = params_site.copy()
          params_lower['text'] = 'системный администратор'
          
          response = requests.get(BASE_URL, params=params_lower, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              print(f"✅ С маленькой буквы: {data.get('found', 0)} вакансий")
          
          time.sleep(0.5)
          
          # Тест 3: Без указания search_field
          print("\n2. ТЕСТ БЕЗ ПАРАМЕТРА search_field")
          print("-" * 70)
          
          params_no_field = {
              'text': 'системный администратор',
              'area': '1',
              'per_page': '50',
              'page': '0'
          }
          
          response = requests.get(BASE_URL, params=params_no_field, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              print(f"✅ Без search_field: {data.get('found', 0)} вакансий")
              print("   (поиск везде - название + описание)")
          
          time.sleep(0.5)
          
          # Тест 4: С дополнительными параметрами
          print("\n3. ТЕСТ С ДОПОЛНИТЕЛЬНЫМИ ПАРАМЕТРАМИ")
          print("-" * 70)
          
          # Только прямые работодатели (без агентств)
          params_direct = params_site.copy()
          params_direct['label'] = 'not_from_agency'
          
          response = requests.get(BASE_URL, params=params_direct, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              found = data.get('found', 0)
              print(f"✅ Без агентств: {found} вакансий")
              print(f"   (на сайте показано 1243 без агентств)")
          
          time.sleep(0.5)
          
          # С адресом
          params_address = params_site.copy()
          params_address['only_with_vacancy'] = 'true'
          
          response = requests.get(BASE_URL, params=params_address, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              print(f"✅ С адресом: {data.get('found', 0)} вакансий")
          
          time.sleep(0.5)
          
          # Тест 5: Проверка актуальности
          print("\n4. ПРОВЕРКА АКТУАЛЬНОСТИ ВАКАНСИЙ")
          print("-" * 70)
          
          # За последние 30 дней
          from datetime import datetime, timedelta
          date_from = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
          
          params_recent = params_site.copy()
          params_recent['date_from'] = date_from
          
          response = requests.get(BASE_URL, params=params_recent, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              print(f"✅ За последние 30 дней: {data.get('found', 0)} вакансий")
          
          time.sleep(0.5)
          
          # За последние 7 дней
          date_from_week = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
          params_recent['date_from'] = date_from_week
          
          response = requests.get(BASE_URL, params=params_recent, headers=HEADERS)
          if response.status_code == 200:
              data = response.json()
              print(f"✅ За последние 7 дней: {data.get('found', 0)} вакансий")
          
          # Тест 6: Альтернативные формулировки
          print("\n5. АЛЬТЕРНАТИВНЫЕ ФОРМУЛИРОВКИ")
          print("-" * 70)
          
          alternatives = [
              'системный администратор OR сисадмин',
              'системный AND администратор',
              '"системный администратор"',  # В кавычках
              'систем* администратор*'  # С wildcards
          ]
          
          for alt in alternatives:
              params_alt = params_site.copy()
              params_alt['text'] = alt
              
              try:
                  response = requests.get(BASE_URL, params=params_alt, headers=HEADERS)
                  if response.status_code == 200:
                      data = response.json()
                      print(f"'{alt}': {data.get('found', 0)} вакансий")
                  else:
                      print(f"'{alt}': ошибка {response.status_code}")
              except:
                  print(f"'{alt}': ошибка запроса")
              
              time.sleep(0.3)
          
          # Итоги
          print("\n" + "=" * 70)
          print("ВЫВОДЫ:")
          print("=" * 70)
          print("1. API возвращает меньше вакансий чем сайт")
          print("2. Возможные причины:")
          print("   - Разные поисковые индексы")
          print("   - Задержка индексации в API")
          print("   - Скрытые вакансии на сайте")
          print("   - Разные алгоритмы ранжирования")
          print("\nРЕКОМЕНДАЦИИ:")
          print("- Использовать поиск без search_field для большего охвата")
          print("- Добавить альтернативные ключевые слова")
          print("- Регулярно обновлять данные")
          
          EOF
          
          python diagnostic.py
