name: Run Fixed Diagnostic

on:
  workflow_dispatch: # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Create and run fixed diagnostic script
        run: |
          cat > fixed_diagnostic.py << 'EOF'
          import requests
          import json
          import time
          from datetime import datetime, timedelta
          
          # API HH.ru
          BASE_URL = "https://api.hh.ru/vacancies"
          
          # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
          HEADERS = {
              'User-Agent': 'DiagnosticTool/1.0 (diagnostic@example.com)'
          }
          
          
          def test_api_limits():
              """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API HH.ru"""
              print("=" * 70)
              print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô API HH.RU")
              print(f"–í—Ä–µ–º—è: {datetime.now()}")
              print("=" * 70)
              
              # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã - –í–°–ï –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏!
              params = {
                  'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                  'area': '1',  # –ú–æ—Å–∫–≤–∞
                  'search_field': 'name',
                  'per_page': '50',  # –°–¢–†–û–ö–ê!
                  'page': '0'  # –°–¢–†–û–ö–ê!
              }
              
              print("\n1. –ü–ï–†–í–´–ô –ó–ê–ü–†–û–°")
              print("-" * 70)
              
              try:
                  response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
                  print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                  
                  if response.status_code == 200:
                      data = response.json()
                      
                      found = data.get('found', 0)
                      pages = data.get('pages', 0)
                      per_page = data.get('per_page', 0)
                      items_count = len(data.get('items', []))
                      
                      print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {found}")
                      print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {pages}")
                      print(f"üìè –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {per_page}")
                      print(f"üì¶ –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {items_count}")
                      print(f"üî¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: {pages * per_page}")
                      
                      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                      total_pages = pages
                      total_found = found
                  else:
                      print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                      print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                      return
                      
              except Exception as e:
                  print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                  return
              
              # –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
              print("\n2. –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–¢–†–ê–ù–ò–¶")
              print("-" * 70)
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
              test_pages = [0, 5, 9, 10, 15, 19, 20, 25]
              last_page_with_data = -1
              total_collected = 0
              
              for page_num in test_pages:
                  if page_num > total_pages + 5:  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                      break
                      
                  params['page'] = str(page_num)  # –í–ê–ñ–ù–û: —Å—Ç—Ä–æ–∫–∞!
                  
                  try:
                      response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
                      
                      if response.status_code == 200:
                          data = response.json()
                          items = data.get('items', [])
                          items_count = len(items)
                          
                          if items_count > 0:
                              last_page_with_data = page_num
                              total_collected += items_count
                              print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num:2d}: {items_count:2d} –≤–∞–∫–∞–Ω—Å–∏–π")
                          else:
                              print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num:2d}: –ø—É—Å—Ç–∞—è")
                      else:
                          print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num:2d}: HTTP {response.status_code}")
                          
                  except Exception as e:
                      print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num:2d}: {str(e)[:50]}")
                  
                  time.sleep(0.3)
              
              print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {last_page_with_data}")
              print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –≤ —Ç–µ—Å—Ç–µ: {total_collected}")
              
              # –ê–Ω–∞–ª–∏–∑ offset
              print("\n3. –ê–ù–ê–õ–ò–ó OFFSET LIMIT")
              print("-" * 70)
              
              offset_limit = (last_page_with_data + 1) * 50
              print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π offset: {offset_limit}")
              
              if last_page_with_data == 19:
                  print("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏–º–∏—Ç: offset = 1000 (20 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ 50)")
              elif last_page_with_data < 19:
                  print(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏–º–∏—Ç: —Ç–æ–ª—å–∫–æ {last_page_with_data + 1} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ")
              
              # –ò—Ç–æ–≥–∏
              print("\n4. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
              print("-" * 70)
              print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_found}")
              print(f"–ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API: {offset_limit}")
              print(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {total_found - offset_limit}")
              print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å: {((total_found - offset_limit) / total_found * 100):.1f}%")
              
              # –¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
              print("\n5. –¢–ï–°–¢ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ü–û –î–ê–¢–ê–ú")
              print("-" * 70)
              
              segments = [
                  (1, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"),
                  (3, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è"),
                  (7, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"),
                  (14, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏"),
                  (30, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
              ]
              
              total_by_segments = 0
              
              for days, name in segments:
                  date_to = datetime.now()
                  date_from = date_to - timedelta(days=days)
                  
                  params_seg = {
                      'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                      'area': '1',
                      'search_field': 'name',
                      'date_from': date_from.strftime('%Y-%m-%d'),
                      'date_to': date_to.strftime('%Y-%m-%d'),
                      'per_page': '50',
                      'page': '0'
                  }
                  
                  try:
                      response = requests.get(BASE_URL, params=params_seg, headers=HEADERS, timeout=30)
                      if response.status_code == 200:
                          data = response.json()
                          found = data.get('found', 0)
                          pages = data.get('pages', 0)
                          total_by_segments += found
                          
                          print(f"\n{name}:")
                          print(f"  –ù–∞–π–¥–µ–Ω–æ: {found} –≤–∞–∫–∞–Ω—Å–∏–π ({pages} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                          
                          if pages > 20:
                              print(f"  ‚ö†Ô∏è –ù—É–∂–Ω–∞ –¥–æ–ø. —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è!")
                          else:
                              print(f"  ‚úÖ –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ")
                              
                  except Exception as e:
                      print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                  
                  time.sleep(0.5)
              
              print(f"\nüìä –°—É–º–º–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º: {total_by_segments}")
              print("(–≤–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏)")
              
              # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              print("\n6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
              print("-" * 70)
              print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å per_page='50' (–∫–∞–∫ —Å—Ç—Ä–æ–∫—É!)")
              print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–∞ 1000")
              print("‚úÖ –î–µ–ª–∞—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –ø–æ ID –≤–∞–∫–∞–Ω—Å–∏–∏")
              print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —É–∑–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
          
          
          if __name__ == "__main__":
              test_api_limits()
          EOF
          
          echo "=== –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ==="
          python fixed_diagnostic.py
          echo "=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="
