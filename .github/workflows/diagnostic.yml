name: Final Diagnostic

on:
  workflow_dispatch:

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install requests
          
      - name: Run diagnostic
        run: |
          cat > diagnostic.py << 'EOF'
          import requests
          import time
          from datetime import datetime, timedelta
          
          BASE_URL = "https://api.hh.ru/vacancies"
          
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ User-Agent, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º –ø–∞—Ä—Å–µ—Ä–µ!
          HEADERS = {
              'User-Agent': 'VacancyParser/1.0 (contact@example.com)'
          }
          
          print("=" * 70)
          print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô API HH.RU")
          print(f"–í—Ä–µ–º—è: {datetime.now()}")
          print("=" * 70)
          
          # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
          params = {
              'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
              'area': '1',
              'search_field': 'name',
              'per_page': '50',
              'page': '0'
          }
          
          print("\n1. –ê–ù–ê–õ–ò–ó –ë–ê–ó–û–í–û–ì–û –ó–ê–ü–†–û–°–ê")
          print("-" * 70)
          
          try:
              response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
              print(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
              
              if response.status_code == 200:
                  data = response.json()
                  found = data.get('found', 0)
                  pages = data.get('pages', 0)
                  per_page = data.get('per_page', 0)
                  items = len(data.get('items', []))
                  
                  print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {found}")
                  print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ: {pages}")
                  print(f"üìè –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {per_page}")
                  print(f"üì¶ –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {items}")
                  print(f"üî¢ –ú–∞–∫—Å. –¥–æ—Å—Ç—É–ø–Ω–æ: {min(pages * per_page, 2000)}")
                  
                  # –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                  print("\n2. –¢–ï–°–¢ –ì–õ–£–ë–ò–ù–´ –ü–ê–ì–ò–ù–ê–¶–ò–ò")
                  print("-" * 70)
                  
                  test_pages = [0, 5, 9, 10, 15, 19, 20, 25]
                  last_working = 0
                  total_items = 0
                  
                  for p in test_pages:
                      if p > pages:
                          break
                          
                      params['page'] = str(p)
                      time.sleep(0.3)
                      
                      try:
                          r = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
                          if r.status_code == 200:
                              d = r.json()
                              count = len(d.get('items', []))
                              if count > 0:
                                  last_working = p
                                  total_items += count
                                  print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")
                              else:
                                  print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p}: –ø—É—Å—Ç–∞—è")
                          else:
                              print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p}: HTTP {r.status_code}")
                      except Exception as e:
                          print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p}: {str(e)[:50]}")
                  
                  # –ê–Ω–∞–ª–∏–∑
                  print(f"\n3. –†–ï–ó–£–õ–¨–¢–ê–¢–´")
                  print("-" * 70)
                  print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_working}")
                  print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π offset: {last_working * 50 + 50}")
                  
                  if last_working == 19:
                      print("üö´ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù –õ–ò–ú–ò–¢: offset ‚â§ 1000")
                      print("   –ü—Ä–∏ per_page=50 –¥–æ—Å—Ç—É–ø–Ω–æ –º–∞–∫—Å–∏–º—É–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü (0-19)")
                      print(f"   –¢–µ—Ä—è–µ—Ç—Å—è: {found - 1000} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ {found}")
                  
                  # –¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                  print("\n4. –ü–†–û–í–ï–†–ö–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ü–û –î–ê–¢–ê–ú")
                  print("-" * 70)
                  
                  date_ranges = [
                      (0, 1, "–°–µ–≥–æ–¥–Ω—è"),
                      (1, 3, "1-3 –¥–Ω—è"),
                      (3, 7, "3-7 –¥–Ω–µ–π"),
                      (7, 14, "–ù–µ–¥–µ–ª—è-2 –Ω–µ–¥–µ–ª–∏"),
                      (14, 30, "2 –Ω–µ–¥–µ–ª–∏-–º–µ—Å—è—Ü")
                  ]
                  
                  total_segmented = 0
                  
                  for start, end, name in date_ranges:
                      date_from = (datetime.now() - timedelta(days=end)).strftime('%Y-%m-%d')
                      date_to = (datetime.now() - timedelta(days=start)).strftime('%Y-%m-%d')
                      
                      p = {
                          'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                          'area': '1',
                          'search_field': 'name',
                          'date_from': date_from,
                          'date_to': date_to,
                          'per_page': '50',
                          'page': '0'
                      }
                      
                      r = requests.get(BASE_URL, params=p, headers=HEADERS, timeout=30)
                      if r.status_code == 200:
                          d = r.json()
                          f = d.get('found', 0)
                          pg = d.get('pages', 0)
                          total_segmented += f
                          
                          status = "‚úÖ" if pg <= 20 else "‚ö†Ô∏è"
                          print(f"{status} {name}: {f} –≤–∞–∫–∞–Ω—Å–∏–π ({pg} —Å—Ç—Ä.)")
                      
                      time.sleep(0.3)
                  
                  print(f"\nüìä –í—Å–µ–≥–æ —á–µ—Ä–µ–∑ —Å–µ–≥–º–µ–Ω—Ç—ã: ~{total_segmented}")
                  print("   (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)")
                  
                  if total_segmented > found:
                      print("‚úÖ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏!")
                  
              else:
                  print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                  
          except Exception as e:
              print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
          
          print("\n" + "=" * 70)
          print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
          print("=" * 70)
          EOF
          
          python diagnostic.py
