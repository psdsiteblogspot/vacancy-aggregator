name: Working Diagnostic

on:
  workflow_dispatch:

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install requests
          
      - name: Run diagnostic
        run: |
          cat > diagnostic.py << 'EOF'
          import requests
          import time
          from datetime import datetime, timedelta
          
          BASE_URL = "https://api.hh.ru/vacancies"
          
          # User-Agent –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Ñ–∞–π–ª–∞ update-vacancies.yml
          HEADERS = {
              'User-Agent': 'VacancyAggregator/2.0 (https://gradelift.ru)'
          }
          
          print("=" * 70)
          print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô API HH.RU")
          print(f"–í—Ä–µ–º—è: {datetime.now()}")
          print("=" * 70)
          
          # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
          params = {
              'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
              'area': '1',
              'search_field': 'name',
              'per_page': '50',
              'page': '0'
          }
          
          print("\n1. –ê–ù–ê–õ–ò–ó –ë–ê–ó–û–í–û–ì–û –ó–ê–ü–†–û–°–ê")
          print("-" * 70)
          
          try:
              response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
              print(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
              
              if response.status_code == 200:
                  data = response.json()
                  found = data.get('found', 0)
                  pages = data.get('pages', 0)
                  per_page = data.get('per_page', 0)
                  items = len(data.get('items', []))
                  
                  print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {found}")
                  print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ: {pages}")
                  print(f"üìè –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {per_page}")
                  print(f"üì¶ –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {items}")
                  print(f"üî¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: {pages * per_page}")
                  
                  # –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                  print("\n2. –¢–ï–°–¢ –ì–õ–£–ë–ò–ù–´ –ü–ê–ì–ò–ù–ê–¶–ò–ò")
                  print("-" * 70)
                  
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–∫–æ–ª–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –ª–∏–º–∏—Ç–∞
                  test_pages = []
                  if pages > 30:
                      test_pages = [0, 5, 9, 10, 15, 19, 20, 25, 29, 30]
                  elif pages > 20:
                      test_pages = [0, 5, 9, 10, 15, 19, 20, pages-1]
                  else:
                      test_pages = list(range(0, min(pages, 25)))
                  
                  last_working = 0
                  total_collected = 0
                  empty_pages = []
                  
                  for p in test_pages:
                      params['page'] = str(p)
                      time.sleep(0.3)
                      
                      try:
                          r = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
                          if r.status_code == 200:
                              d = r.json()
                              count = len(d.get('items', []))
                              if count > 0:
                                  last_working = p
                                  total_collected += count
                                  print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p:2d}: {count:2d} –≤–∞–∫–∞–Ω—Å–∏–π (offset {p*50})")
                              else:
                                  empty_pages.append(p)
                                  print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p:2d}: –ü–£–°–¢–ê–Ø (offset {p*50})")
                          else:
                              print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p:2d}: HTTP {r.status_code}")
                      except Exception as e:
                          print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p:2d}: {str(e)[:50]}")
                  
                  # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                  print(f"\n3. –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
                  print("-" * 70)
                  print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ API: {pages}")
                  print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_working}")
                  print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π offset: {last_working * 50 + 50}")
                  print(f"–°–æ–±—Ä–∞–Ω–æ –≤ —Ç–µ—Å—Ç–µ: {total_collected} –≤–∞–∫–∞–Ω—Å–∏–π")
                  
                  if empty_pages:
                      first_empty = min(empty_pages)
                      print(f"\n–ü–µ—Ä–≤–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {first_empty} (offset {first_empty * 50})")
                      if first_empty == 20:
                          print("üö´ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù –õ–ò–ú–ò–¢: offset = 1000 (20 —Å—Ç—Ä–∞–Ω–∏—Ü)")
                      elif first_empty == 10:
                          print("üö´ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù –õ–ò–ú–ò–¢: offset = 500 (10 —Å—Ç—Ä–∞–Ω–∏—Ü)")
                  
                  max_available = (last_working + 1) * 50
                  lost = found - max_available
                  print(f"\nüìä –ò–¢–û–ì–û:")
                  print(f"   –ù–∞–π–¥–µ–Ω–æ: {found}")
                  print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API: {max_available}")
                  print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {lost} ({(lost/found*100):.1f}%)")
                  
                  # –¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                  print("\n4. –¢–ï–°–¢ –° per_page=100")
                  print("-" * 70)
                  
                  params2 = params.copy()
                  params2['per_page'] = '100'
                  params2['page'] = '0'
                  
                  r = requests.get(BASE_URL, params=params2, headers=HEADERS, timeout=30)
                  if r.status_code == 200:
                      d = r.json()
                      print(f"‚úÖ per_page=100 —Ä–∞–±–æ—Ç–∞–µ—Ç")
                      print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {d.get('pages', 0)}")
                      print(f"   –ù–∞ –ø–µ—Ä–≤–æ–π: {len(d.get('items', []))}")
                  else:
                      print(f"‚ùå per_page=100 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: HTTP {r.status_code}")
                  
                  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                  print("\n5. –¢–ï–°–¢ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ü–û –î–ê–¢–ê–ú")
                  print("-" * 70)
                  
                  segments = [
                      (1, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"),
                      (3, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è"),
                      (7, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
                  ]
                  
                  for days, name in segments:
                      date_from = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
                      date_to = datetime.now().strftime('%Y-%m-%d')
                      
                      p = {
                          'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                          'area': '1',
                          'search_field': 'name',
                          'date_from': date_from,
                          'date_to': date_to,
                          'per_page': '50',
                          'page': '0'
                      }
                      
                      r = requests.get(BASE_URL, params=p, headers=HEADERS, timeout=30)
                      if r.status_code == 200:
                          d = r.json()
                          f = d.get('found', 0)
                          pg = d.get('pages', 0)
                          
                          if pg <= 20:
                              print(f"‚úÖ {name}: {f} –≤–∞–∫–∞–Ω—Å–∏–π ({pg} —Å—Ç—Ä.) - –û–ö")
                          else:
                              print(f"‚ö†Ô∏è {name}: {f} –≤–∞–∫–∞–Ω—Å–∏–π ({pg} —Å—Ç—Ä.) - –Ω—É–∂–Ω–∞ –¥–æ–ø. —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
                      
                      time.sleep(0.3)
                  
              else:
                  print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                  
          except Exception as e:
              print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
          
          print("\n" + "=" * 70)
          print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
          print("=" * 70)
          EOF
          
          python diagnostic.py
