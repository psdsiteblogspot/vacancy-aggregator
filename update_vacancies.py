import requests
import json
from datetime import datetime
import time
from typing import List, Dict, Optional

# API HH.ru
BASE_URL = "https://api.hh.ru/vacancies"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': 'VacancyParser/1.0 (contact@example.com)'
}

# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REQUEST_DELAY = 0.3


def get_vacancies_simple() -> tuple[List[Dict], Dict]:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä –í–°–ï–• –≤–∞–∫–∞–Ω—Å–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    print("=" * 60)
    print("–°–ë–û–† –í–ê–ö–ê–ù–°–ò–ô: –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –ú–æ—Å–∫–≤–µ")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    print("=" * 60)
    
    params = {
        'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'area': '1',  # –¢–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞
        'search_field': 'name',  # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        'per_page': 100,  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        'page': 0
    }
    
    all_vacancies = []
    page = 0
    stats = {
        'found': 0,
        'pages': 0,
        'collected': 0,
        'pages_processed': 0
    }
    
    while True:
        params['page'] = page
        print(f"\nüìÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
        
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
                break
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = response.json()
            
            # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if page == 0:
                stats['found'] = data.get('found', 0)
                stats['pages'] = data.get('pages', 0)
                
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats['found']}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {stats['pages']}")
                print(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: {data.get('alternate_url', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                max_available = min(stats['pages'] * 100, 2000)
                print(f"   –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API: {max_available}")
                
                if stats['found'] > 2000:
                    print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {stats['found']} –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–æ API –≤–µ—Ä–Ω–µ—Ç –º–∞–∫—Å–∏–º—É–º 2000!")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            items = data.get('items', [])
            items_count = len(items)
            
            if items_count == 0:
                print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø—É—Å—Ç–∞—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä")
                break
            
            all_vacancies.extend(items)
            stats['collected'] = len(all_vacancies)
            stats['pages_processed'] = page + 1
            
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {items_count} –≤–∞–∫–∞–Ω—Å–∏–π")
            print(f"   –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {stats['collected']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page >= stats['pages'] - 1:
                print(f"\n‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ API
            if stats['collected'] >= 2000:
                print(f"\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –≤ 2000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–ª—É—á–∞–π
            if page >= 19:  # 20 —Å—Ç—Ä–∞–Ω–∏—Ü * 100 = 2000
                print(f"\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 20 —Å—Ç—Ä–∞–Ω–∏—Ü")
                break
            
            page += 1
            time.sleep(REQUEST_DELAY)
            
        except requests.exceptions.RequestException as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            break
        except json.JSONDecodeError as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            break
    
    return all_vacancies, stats


def parse_vacancy(item: Dict) -> Dict:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancy = {
        'id': item.get('id', ''),
        'title': item.get('name', ''),
        'company': item.get('employer', {}).get('name', ''),
        'company_url': item.get('employer', {}).get('alternate_url', ''),
        'salary': '–Ω–µ —É–∫–∞–∑–∞–Ω–∞',
        'experience': item.get('experience', {}).get('name', ''),
        'schedule': item.get('schedule', {}).get('name', ''),
        'employment': item.get('employment', {}).get('name', ''),
        'area': item.get('area', {}).get('name', ''),
        'publishDate': item.get('published_at', '')[:10],
        'url': item.get('alternate_url', ''),
        'requirement': item.get('snippet', {}).get('requirement', ''),
        'responsibility': item.get('snippet', {}).get('responsibility', '')
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    if item.get('salary'):
        salary_data = item['salary']
        salary_from = salary_data.get('from')
        salary_to = salary_data.get('to')
        currency = salary_data.get('currency', 'RUR')
        gross = salary_data.get('gross', False)
        
        if salary_from and salary_to:
            vacancy['salary'] = f"–æ—Ç {salary_from:,} –¥–æ {salary_to:,} {currency}"
        elif salary_from:
            vacancy['salary'] = f"–æ—Ç {salary_from:,} {currency}"
        elif salary_to:
            vacancy['salary'] = f"–¥–æ {salary_to:,} {currency}"
            
        if gross:
            vacancy['salary'] += " (–¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤)"
        else:
            vacancy['salary'] += " (–Ω–∞ —Ä—É–∫–∏)"
    
    return vacancy


def analyze_results(vacancies: List[Dict], stats: Dict):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞"""
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    print(f"\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –≤ –ø–æ–∏—Å–∫–µ: {stats['found']}")
    print(f"   –°–æ–±—Ä–∞–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏: {stats['collected']}")
    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['pages_processed']} –∏–∑ {stats['pages']}")
    
    if stats['found'] > 0:
        completeness = (stats['collected'] / stats['found']) * 100
        print(f"   –ü–æ–ª–Ω–æ—Ç–∞ —Å–±–æ—Ä–∞: {completeness:.1f}%")
        
        missing = stats['found'] - stats['collected']
        if missing > 0:
            print(f"   –ù–µ —Å–æ–±—Ä–∞–Ω–æ: {missing} –≤–∞–∫–∞–Ω—Å–∏–π")
            
            print(f"\n‚ùì –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ—Ç–µ—Ä–∏ {missing} –≤–∞–∫–∞–Ω—Å–∏–π:")
            
            if stats['found'] > 2000:
                print(f"   1. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –≤ 2000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ {stats['found']})")
            
            if stats['pages_processed'] < stats['pages']:
                print(f"   2. –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({stats['pages_processed']} –∏–∑ {stats['pages']})")
            
            if completeness > 95:
                print(f"   3. –ù–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞")
            else:
                print(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å–∞–π—Ç–∞")
                print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º —Ä–∞–±–æ—Ç—ã
    if vacancies:
        schedules = {}
        for v in vacancies:
            schedule = v.get('schedule', '–ù–µ —É–∫–∞–∑–∞–Ω')
            schedules[schedule] = schedules.get(schedule, 0) + 1
        
        print(f"\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã:")
        for schedule, count in sorted(schedules.items(), key=lambda x: x[1], reverse=True):
            percent = (count / len(vacancies)) * 100
            print(f"   {schedule}: {count} ({percent:.1f}%)")


def save_vacancies(vacancies: List[Dict], stats: Dict, filename: str = 'hh_vacancies_moscow.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
    # –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏
    parsed_vacancies = [parse_vacancy(v) for v in vacancies]
    
    output = {
        'source': 'hh.ru',
        'search_params': {
            'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'area': '–ú–æ—Å–∫–≤–∞',
            'area_id': '1',
            'search_field': '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏',
            'filter': '–ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤'
        },
        'updated': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
        'statistics': {
            'found': stats['found'],
            'collected': stats['collected'],
            'completeness': f"{(stats['collected'] / stats['found'] * 100):.1f}%" if stats['found'] > 0 else "0%",
            'pages_processed': stats['pages_processed'],
            'total_pages': stats['pages']
        },
        'total_count': len(parsed_vacancies),
        'vacancies': parsed_vacancies
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(output, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        raw_vacancies, stats = get_vacancies_simple()
        
        if not raw_vacancies:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyze_results(raw_vacancies, stats)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        save_vacancies(raw_vacancies, stats)
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
