import requests
import json
import time
from datetime import datetime

# API HH.ru
BASE_URL = "https://api.hh.ru/vacancies"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': 'DiagnosticTool/1.0 (diagnostic@example.com)'
}


def precise_page_limit_test():
    """–¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü API HH.ru"""
    print("=" * 70)
    print("–¢–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ü–ê–ì–ò–ù–ê–¶–ò–ò HH.RU API")
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print("=" * 70)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø–∞—Ä—Å–µ—Ä–µ
    params = {
        'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'area': '1',  # –ú–æ—Å–∫–≤–∞
        'search_field': 'name',
        'per_page': 50,  # –ö–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ
        'page': 0
    }
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print("\n1. –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ì–û –ó–ê–ü–†–û–°–ê")
    print("-" * 70)
    
    try:
        response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
        if response.status_code == 200:
            data = response.json()
            
            found = data.get('found', 0)
            pages = data.get('pages', 0)
            per_page = data.get('per_page', 0)
            items_count = len(data.get('items', []))
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {found}")
            print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ API: {pages}")
            print(f"üìè –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {per_page}")
            print(f"üì¶ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {items_count}")
            print(f"üî¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: {pages * per_page}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            alt_url = data.get('alternate_url', '')
            print(f"üîó –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: {alt_url}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    print("\n2. –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–¢–†–ê–ù–ò–¶")
    print("-" * 70)
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_pages = [0, 9, 10, 19, 20, 25, 26, 27, 30]
    actual_pages_with_data = 0
    last_page_with_data = -1
    total_items = 0
    
    for page in test_pages:
        params['page'] = page
        
        try:
            response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', [])
                items_count = len(items)
                total_items += items_count
                
                if items_count > 0:
                    actual_pages_with_data += 1
                    last_page_with_data = page
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page:2d}: {items_count:2d} –≤–∞–∫–∞–Ω—Å–∏–π")
                else:
                    print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page:2d}: –ü–£–°–¢–ê–Ø")
            else:
                print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page:2d}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page:2d}: –û—à–∏–±–∫–∞ {str(e)[:50]}")
        
        time.sleep(0.3)
    
    print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {last_page_with_data}")
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏: {actual_pages_with_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º offset
    print("\n3. –ê–ù–ê–õ–ò–ó OFFSET (page √ó per_page)")
    print("-" * 70)
    
    critical_offsets = [
        (9, 450),    # page 9, offset 450
        (10, 500),   # page 10, offset 500
        (19, 950),   # page 19, offset 950
        (20, 1000),  # page 20, offset 1000 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞!
        (21, 1050),  # page 21, offset 1050
    ]
    
    for page, offset in critical_offsets:
        params['page'] = page
        status = "?"
        
        try:
            response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
            if response.status_code == 200:
                data = response.json()
                items = len(data.get('items', []))
                if items > 0:
                    status = f"‚úÖ {items} –≤–∞–∫–∞–Ω—Å–∏–π"
                else:
                    status = "‚ö†Ô∏è –ü–£–°–¢–ê–Ø"
            else:
                status = f"‚ùå HTTP {response.status_code}"
        except:
            status = "‚ùå –û—à–∏–±–∫–∞"
        
        print(f"Offset {offset:4d} (page {page:2d}): {status}")
        time.sleep(0.3)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n4. –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 70)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if last_page_with_data >= 19:
        max_accessible = 1000  # offset limit
        print(f"üö´ –û–ë–ù–ê–†–£–ñ–ï–ù –õ–ò–ú–ò–¢: offset ‚â§ 1000")
        print(f"   –ü—Ä–∏ per_page=50 —ç—Ç–æ –º–∞–∫—Å–∏–º—É–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü (0-19)")
        print(f"   –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ: {max_accessible} –≤–∞–∫–∞–Ω—Å–∏–π")
    else:
        max_accessible = (last_page_with_data + 1) * 50
        print(f"üö´ –û–ë–ù–ê–†–£–ñ–ï–ù –õ–ò–ú–ò–¢: –º–∞–∫—Å–∏–º—É–º {last_page_with_data + 1} —Å—Ç—Ä–∞–Ω–∏—Ü")
        print(f"   –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ: {max_accessible} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ API: {found}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ: {max_accessible}")
    print(f"   –ü–æ—Ç–µ—Ä—è–Ω–æ: {found - max_accessible}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å: {((found - max_accessible) / found * 100):.1f}%")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –í–ê–ö–ê–ù–°–ò–ô")
    print("-" * 70)
    
    if found > 1000:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        print("   - –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-3 –¥–Ω—è")
        print("   - –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4-7 –¥–Ω–µ–π")
        print("   - –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8-14 –¥–Ω–µ–π")
        print("   - –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15-30 –¥–Ω–µ–π")
        print("\n‚úÖ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
        print("   - –ü–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã (experience)")
        print("   - –ü–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (employment)")
        print("   - –ü–æ –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã (schedule)")
        print("\n‚úÖ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
        print("   - '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä linux'")
        print("   - '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä windows'")
        print("   - '—Å–∏—Å–∞–¥–º–∏–Ω junior'")
        print("   - '—Å–∏—Å–∞–¥–º–∏–Ω middle'")


def test_date_segmentation():
    """–¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º"""
    print("\n\n" + "=" * 70)
    print("–¢–ï–°–¢ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ü–û –î–ê–¢–ê–ú")
    print("=" * 70)
    
    from datetime import datetime, timedelta
    
    segments = [
        (1, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"),
        (3, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è"),
        (7, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"),
        (30, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
    ]
    
    total_found = 0
    
    for days, name in segments:
        date_from = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
        date_to = datetime.now().strftime('%Y-%m-%d')
        
        params = {
            'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'area': '1',
            'search_field': 'name',
            'date_from': date_from,
            'date_to': date_to,
            'per_page': 50,
            'page': 0
        }
        
        try:
            response = requests.get(BASE_URL, params=params, headers=HEADERS, timeout=30)
            if response.status_code == 200:
                data = response.json()
                found = data.get('found', 0)
                pages = data.get('pages', 0)
                total_found += found
                
                print(f"\n{name} ({date_from} - {date_to}):")
                print(f"  –ù–∞–π–¥–µ–Ω–æ: {found} –≤–∞–∫–∞–Ω—Å–∏–π")
                print(f"  –°—Ç—Ä–∞–Ω–∏—Ü: {pages}")
                
                if pages > 20:
                    print(f"  ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è!")
                else:
                    print(f"  ‚úÖ –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(0.5)
    
    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é: ~{total_found}")
    print("   (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤
        precise_page_limit_test()
        
        # –¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        test_date_segmentation()
        
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
