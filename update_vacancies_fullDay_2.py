import requests
import json
from datetime import datetime
import time
from typing import List, Dict, Optional

# API HH.ru
BASE_URL = "https://api.hh.ru/vacancies"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
SEARCH_PARAMS = {
    'text': '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',  # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    'area': ['80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104'],                        # –†–µ–≥–∏–æ–Ω—ã
    'schedule': ['remote', 'flexible', 'fullDay', 'shift', 'flyInFlyOut'],               # –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    'search_field': 'name',             # –ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    'per_page': 1000,                    # –ú–∞–∫—Å–∏–º—É–º –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    'page': 0
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': 'VacancyParser/1.0 (contact@example.com)'  # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π User-Agent
}

# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REQUEST_DELAY = 0.5


def get_vacancies_page(page: int) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ API HH.ru
    
    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    params = SEARCH_PARAMS.copy()
    params['page'] = page
    
    try:
        response = requests.get(BASE_URL, params=params, headers=HEADERS)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
        return None


def parse_vacancy(item: Dict) -> Dict:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ API
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    """
    vacancy = {
        'id': item.get('id', ''),
        'title': item.get('name', ''),
        'company': item.get('employer', {}).get('name', ''),
        'company_url': item.get('employer', {}).get('alternate_url', ''),
        'salary': '–Ω–µ —É–∫–∞–∑–∞–Ω–∞',
        'experience': item.get('experience', {}).get('name', ''),
        'schedule': item.get('schedule', {}).get('name', ''),
        'employment': item.get('employment', {}).get('name', ''),
        'area': item.get('area', {}).get('name', ''),
        'publishDate': item.get('published_at', '')[:10],  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
        'url': item.get('alternate_url', ''),
        'requirement': item.get('snippet', {}).get('requirement', ''),
        'responsibility': item.get('snippet', {}).get('responsibility', '')
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    if item.get('salary'):
        salary_data = item['salary']
        salary_from = salary_data.get('from')
        salary_to = salary_data.get('to')
        currency = salary_data.get('currency', 'RUR')
        gross = salary_data.get('gross', False)
        
        if salary_from and salary_to:
            vacancy['salary'] = f"–æ—Ç {salary_from:,} –¥–æ {salary_to:,} {currency}"
        elif salary_from:
            vacancy['salary'] = f"–æ—Ç {salary_from:,} {currency}"
        elif salary_to:
            vacancy['salary'] = f"–¥–æ {salary_to:,} {currency}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
        if gross:
            vacancy['salary'] += " (–¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤)"
        else:
            vacancy['salary'] += " (–Ω–∞ —Ä—É–∫–∏)"
    
    return vacancy


def collect_all_vacancies() -> List[Dict]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    
    Returns:
        –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    """
    all_vacancies = []
    page = 0
    total_pages = None
    
    print("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π...")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
    print(f"  - –¢–µ–∫—Å—Ç: '{SEARCH_PARAMS['text']}'")
    print(f"  - –†–µ–≥–∏–æ–Ω: –†–æ—Å—Å–∏—è")
    print(f"  - –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: –£–¥–∞–ª—ë–Ω–Ω–æ")
    print(f"  - –ü–æ–∏—Å–∫ –≤: –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
    print("-" * 50)
    
    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        data = get_vacancies_page(page)
        
        if data is None:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            page += 1
            continue
        
        # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–∑–Ω–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if total_pages is None:
            total_pages = data.get('pages', 0)
            total_found = data.get('found', 0)
            print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_found}")
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_pages}")
            print("-" * 50)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        items = data.get('items', [])
        for item in items:
            vacancy = parse_vacancy(item)
            all_vacancies.append(vacancy)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page + 1}/{total_pages} | –°–æ–±—Ä–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(all_vacancies)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page += 1
        if page >= total_pages:
            break
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(REQUEST_DELAY)
    
    return all_vacancies


def save_vacancies(vacancies: List[Dict], filename: str = 'hh_vacancies_fullDay.json'):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ JSON —Ñ–∞–π–ª
    
    Args:
        vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    output = {
        'source': 'hh.ru',
        'search_params': {
            'text': SEARCH_PARAMS['text'],
            'area': '–†–æ—Å—Å–∏—è',
            'schedule': '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            'search_field': '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏'
        },
        'updated': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
        'total_count': len(vacancies),
        'vacancies': vacancies
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(output, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    print(f"üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")


def print_statistics(vacancies: List[Dict]):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º
    
    Args:
        vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    """
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º:")
    print("-" * 50)
    
    # –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
    companies = {}
    for v in vacancies:
        company = v['company']
        companies[company] = companies.get(company, 0) + 1
    
    top_companies = sorted(companies.items(), key=lambda x: x[1], reverse=True)[:10]
    print("\nüè¢ –¢–æ–ø-10 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π:")
    for i, (company, count) in enumerate(top_companies, 1):
        print(f"{i:2d}. {company}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
    with_salary = sum(1 for v in vacancies if v['salary'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    print(f"\nüí∞ –í–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {with_salary} ({with_salary/len(vacancies)*100:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regions = {}
    for v in vacancies:
        region = v['area']
        regions[region] = regions.get(region, 0) + 1
    
    top_regions = sorted(regions.items(), key=lambda x: x[1], reverse=True)[:10]
    print("\nüåç –¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤:")
    for i, (region, count) in enumerate(top_regions, 1):
        print(f"{i:2d}. {region}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = collect_all_vacancies()
        
        if not vacancies:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_vacancies(vacancies)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_statistics(vacancies)
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
